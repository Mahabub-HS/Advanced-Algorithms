package bd.edu.seu;public class Main {    public static void main(String[] args) {//        int[] length={1,3,5,7};//        int[] profit = {2,4,8,10};//        int N = 6;//        int[] length={1,2,3,4};//        int[] profit = {2,5,9,6};//        int N=5;        int[] length={1,2,3,4, 5, 6, 7, 8};        int[] profit={1,5,8,9,10,17,17,20};        int N = 8;        System.out.println(RodCuttingFunction(length,profit,N));    }    private static String RodCuttingFunction(int[] length,int[] profit,int N) {        int[][] dpTable = new int[profit.length+1][N+1];        for(int i=0;i<=profit.length;i++){            for(int j=0;j<=N;j++){                if(i==0||j==0)dpTable[i][j]=0;                else if(length[i-1]>j)dpTable[i][j]=dpTable[i-1][j];                else{                    dpTable[i][j]=Math.max(dpTable[i-1][j],profit[i-1]+dpTable[i][j-length[i-1]]);                }            }        }        System.out.println("Table : ");        for(int i=0;i<=profit.length;i++){            for(int j=0;j<=N;j++){                System.out.print(dpTable[i][j]+" ");            }            System.out.println();        }        //todo call findPieces() method for get the pieces        String pieces = findPieces(dpTable, N, length);        return "\nMaximum profit : "+dpTable[profit.length][N]+"\n"+pieces;    }    private static String findPieces(int[][] dpTable, int N, int[] length) {        String pieces="Pieces: ";        int j=N;        int i=length.length;        int size=N;        while (j>0){            if(dpTable[i][j]!=dpTable[i-1][j]){                pieces+=length[i-1]+" ";                size-=length[i-1];                j=size;            }else i--;        }        return pieces;    }}