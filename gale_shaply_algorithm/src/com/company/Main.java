package com.company;import java.util.Arrays;public class Main {    public static final int n=5;    public static void main(String[] args) {//        int[][] prefer = new int[][]{{7, 5, 6, 4},//                {5, 4, 6, 7},//                {4, 5, 6, 7},//                {4, 5, 6, 7},//                {0, 1, 2, 3},//                {0, 1, 2, 3},//                {0, 1, 2, 3},//                {0, 1, 2, 3}};        int [][] prefer={                {8,6,7,5,9},                {9,7,6,5,8},                {6,9,5,8,7},                {9,6,8,7,5},                {8,5,6,7,9},                {3,1,4,2,0},                {1,0,3,2,4},                {0,2,4,3,1},                {3,0,2,1,4},                {1,4,0,2,3}        };        stableMarriage(prefer);    }    private static void stableMarriage(int[][] prefer) {        int [] wParter = new int[n];        int [] mFree = new int[n];        Arrays.fill(wParter,-1);        Arrays.fill(mFree,0);        int freeman=n;        while (freeman>0) {            int j;            for (j = 0; j < n; j++) {                if (mFree[j] == 0) {                    break;                }            }            for (int i = 0; i < ((2 * n) - 1) && mFree[j] == 0; i++) {                //System.out.println(prefer[j][i]);                int w = prefer[j][i];                if(wParter[w-n]==-1){                    wParter[w-n]=j;                    mFree[j]=1;                    freeman--;                }else{                    int current_partner = wParter[w-n];                    if(findBestOne(current_partner,w,j,prefer)){                        wParter[w-n]=j;                        mFree[j]=1;                        mFree[current_partner]=0;                    }                }            }        }        for(int i=0;i<n;i++){            System.out.println(" ");            System.out.println(wParter[i]+" "+(i+n));        }    }    private static boolean findBestOne(int current_partner, int w, int j, int[][] prefer) {        for (int i = 0; i < n; i++)        {            if (prefer[w][i] == j)                return true;            if (prefer[w][i] == current_partner)                return false;        }        return false;    }}