package com.company;public class Main {    public static void main(String[] args) {        int[] arr={4,10,3,12,20,7};        MCM(arr,arr.length);    }    private static void MCM(int[] arr, int length) {        int[][] tebulationTable = new int[length][length];        int[][] path = new int[length][length];        int i,j=0,l;        for(l=1;l<length;l++){            for(i=1;i<=length-l;i++){                j=i+l-1;                if(i==j){                    tebulationTable[i][j]=0;                }else {                    int min=Integer.MAX_VALUE;                    int splitingPoint=Integer.MAX_VALUE;                    for (int k=i;k<j;k++){                        int value = tebulationTable[i][k]+tebulationTable[k+1][j] + (arr[i-1]*arr[k]*arr[j]);                        if(value<min) {                            min=value;                            splitingPoint = k;                        }                    }                    tebulationTable[i][j]=min;                    path[i][j]=splitingPoint;                }            }        }        //TODO print the result        System.out.println(tebulationTable[1][length-1]);        //TODO print the sequence table        for(i=1;i<path.length-1;i++){            for(j=2;j<path.length;j++){                System.out.print(path[i][j]+" ");            }            System.out.println();        }        //TODO function call for optimal sequence        System.out.println(getSequence(path,1,path.length-1));    }    private static String getSequence(int[][]s, int i, int j) {        if (i == j) {            return "M"+i;        }        else {            String  sequence="";            sequence+="(";            sequence+=(getSequence(s, i, s[i][j]));            sequence+=" * ";            sequence+=(getSequence(s, s[i][j] + 1, j));            sequence+=")";            return sequence;        }    }}